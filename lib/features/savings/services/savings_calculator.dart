// lib/features/savings/services/savings_calculator.dart
import 'package:my_kopilka/features/savings/models/goal.dart';
import 'package:my_kopilka/features/savings/models/transaction.dart';

/// –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–∑–Ω–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
class SavingsCalculator {
  
  /// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  static SavingsPlan calculatePlan(Goal goal, List<Transaction> transactions) {
    final now = DateTime.now();
    final totalRemaining = (goal.targetAmount - goal.currentAmount).clamp(0, goal.targetAmount);
    
    if (totalRemaining <= 0) {
      return SavingsPlan(
        isGoalCompleted: true,
        monthlyRequired: 0,
        dailyRequired: 0,
        currentMonthStatus: MonthStatus.completed(),
      );
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
    final monthsRemaining = _calculateMonthsRemaining(now, goal.deadlineAt);
    
    // –ë–∞–∑–æ–≤—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å
    final baseMonthlyRequired = monthsRemaining > 0 
        ? (totalRemaining / monthsRemaining).ceil() 
        : totalRemaining;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    final currentMonthStatus = _analyzeCurrentMonth(
      now, 
      baseMonthlyRequired, 
      transactions,
      monthsRemaining
    );

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    final adjustedMonthlyRequired = _calculateAdjustedMonthly(
      totalRemaining,
      currentMonthStatus,
      monthsRemaining
    );

    final dailyRequired = _calculateDailyRequired(
      adjustedMonthlyRequired,
      currentMonthStatus,
      now
    );

    return SavingsPlan(
      isGoalCompleted: false,
      monthlyRequired: adjustedMonthlyRequired,
      dailyRequired: dailyRequired,
      currentMonthStatus: currentMonthStatus,
      monthsRemaining: monthsRemaining,
      totalRemaining: totalRemaining,
      projectedCompletion: _calculateProjectedCompletion(now, goal, dailyRequired),
    );
  }

  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
  static double _calculateMonthsRemaining(DateTime now, DateTime deadline) {
    if (deadline.isBefore(now)) return 0;
    
    final diffInDays = deadline.difference(now).inDays;
    return diffInDays / 30.44; // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
  }

  /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  static MonthStatus _analyzeCurrentMonth(
    DateTime now, 
    int baseMonthlyRequired, 
    List<Transaction> transactions,
    double monthsRemaining
  ) {
    final startOfMonth = DateTime(now.year, now.month, 1);
    final endOfMonth = DateTime(now.year, now.month + 1, 0);
    final daysInMonth = endOfMonth.day;
    final daysPassed = now.day;
    final daysLeft = daysInMonth - daysPassed;

    // –°—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    final amountThisMonth = transactions
        .where((t) => 
          t.createdAt.isAfter(startOfMonth.subtract(Duration(days: 1))) && 
          t.createdAt.isBefore(endOfMonth.add(Duration(days: 1))) &&
          t.amount > 0
        )
        .fold<int>(0, (sum, t) => sum + t.amount);

    // –î–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–Ω–µ—Å—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é
    final shouldHaveByNow = (baseMonthlyRequired * daysPassed / daysInMonth).ceil();
    
    // –†–∞–∑–Ω–∏—Ü–∞
    final difference = amountThisMonth - shouldHaveByNow;
    final isAhead = difference > 0;
    final isBehind = difference < 0;

    return MonthStatus(
      plannedAmount: baseMonthlyRequired,
      actualAmount: amountThisMonth,
      shouldHaveByNow: shouldHaveByNow,
      difference: difference,
      daysLeft: daysLeft,
      daysPassed: daysPassed,
      daysInMonth: daysInMonth,
      isAhead: isAhead,
      isBehind: isBehind,
    );
  }

  /// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
  static int _calculateAdjustedMonthly(
    int totalRemaining,
    MonthStatus currentMonth,
    double monthsRemaining
  ) {
    if (monthsRemaining <= 1) {
      // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü - –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –≤—Å—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
      return totalRemaining;
    }

    // –ï—Å–ª–∏ –º—ã –æ—Ç—Å—Ç–∞—ë–º –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ª–≥
    if (currentMonth.isBehind) {
      final debt = currentMonth.difference.abs();
      final monthsForDebt = monthsRemaining - 1; // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      final additionalMonthly = monthsForDebt > 0 ? (debt / monthsForDebt).ceil() : debt;
      
      return currentMonth.plannedAmount + additionalMonthly;
    }
    
    // –ï—Å–ª–∏ –º—ã –æ–ø–µ—Ä–µ–∂–∞–µ–º –ø–ª–∞–Ω, –º–æ–∂–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –±—É–¥—É—â–∏–µ –≤–∑–Ω–æ—Å—ã
    if (currentMonth.isAhead) {
      final surplus = currentMonth.difference;
      final monthsForSurplus = monthsRemaining - 1;
      final reductionMonthly = monthsForSurplus > 0 ? (surplus / monthsForSurplus).floor() : surplus;
      
      return (currentMonth.plannedAmount - reductionMonthly).clamp(0, currentMonth.plannedAmount);
    }

    return currentMonth.plannedAmount;
  }

  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –≤–∑–Ω–æ—Å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  static int _calculateDailyRequired(
    int adjustedMonthlyRequired,
    MonthStatus currentMonth,
    DateTime now
  ) {
    if (currentMonth.daysLeft <= 0) return 0;

    // –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
    final remainingForMonth = (adjustedMonthlyRequired - currentMonth.actualAmount).clamp(0, adjustedMonthlyRequired);
    
    return (remainingForMonth / currentMonth.daysLeft).ceil();
  }

  /// –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ
  static DateTime? _calculateProjectedCompletion(DateTime now, Goal goal, int dailyRequired) {
    if (dailyRequired <= 0) return goal.deadlineAt;
    
    final remaining = (goal.targetAmount - goal.currentAmount).clamp(0, goal.targetAmount);
    final daysNeeded = (remaining / dailyRequired).ceil();
    
    return now.add(Duration(days: daysNeeded));
  }
}

/// –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
class SavingsPlan {
  final bool isGoalCompleted;
  final int monthlyRequired;      // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å
  final int dailyRequired;        // –î–Ω–µ–≤–Ω–æ–π –≤–∑–Ω–æ—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  final MonthStatus currentMonthStatus;
  final double? monthsRemaining;
  final int? totalRemaining;
  final DateTime? projectedCompletion;

  SavingsPlan({
    required this.isGoalCompleted,
    required this.monthlyRequired,
    required this.dailyRequired,
    required this.currentMonthStatus,
    this.monthsRemaining,
    this.totalRemaining,
    this.projectedCompletion,
  });

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
  String get statusMessage {
    if (isGoalCompleted) return "üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!";
    
    final status = currentMonthStatus;
    if (status.isAhead) {
      return "üí™ –û—Ç–ª–∏—á–Ω–æ! –í—ã –æ–ø–µ—Ä–µ–∂–∞–µ—Ç–µ –ø–ª–∞–Ω –Ω–∞ ${status.difference} ‚ÇΩ";
    } else if (status.isBehind) {
      return "‚ö†Ô∏è –ù—É–∂–Ω–æ –Ω–∞–≤–µ—Ä—Å—Ç–∞—Ç—å ${status.difference.abs()} ‚ÇΩ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞";
    } else {
      return "‚úÖ –ò–¥—ë—Ç–µ —Ç–æ—á–Ω–æ –ø–æ –ø–ª–∞–Ω—É!";
    }
  }

  /// –¶–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è UI)
  String get statusColor {
    if (isGoalCompleted) return "success";
    if (currentMonthStatus.isAhead) return "success";
    if (currentMonthStatus.isBehind) return "warning";
    return "primary";
  }
}

/// –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
class MonthStatus {
  final int plannedAmount;        // –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Å—É–º–º–∞ –Ω–∞ –º–µ—Å—è—Ü
  final int actualAmount;         // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–Ω–µ—Å–µ–Ω–æ
  final int shouldHaveByNow;      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–Ω–µ—Å–µ–Ω–æ –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é
  final int difference;           // –†–∞–∑–Ω–∏—Ü–∞ (+ –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ, - –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ)
  final int daysLeft;             // –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –≤ –º–µ—Å—è—Ü–µ
  final int daysPassed;           // –î–Ω–µ–π –ø—Ä–æ—à–ª–æ
  final int daysInMonth;          // –í—Å–µ–≥–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
  final bool isAhead;             // –û–ø–µ—Ä–µ–∂–∞–µ–º –ø–ª–∞–Ω
  final bool isBehind;            // –û—Ç—Å—Ç–∞—ë–º –æ—Ç –ø–ª–∞–Ω–∞

  MonthStatus({
    required this.plannedAmount,
    required this.actualAmount,
    required this.shouldHaveByNow,
    required this.difference,
    required this.daysLeft,
    required this.daysPassed,
    required this.daysInMonth,
    required this.isAhead,
    required this.isBehind,
  });

  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ü–µ–ª–∏
  factory MonthStatus.completed() => MonthStatus(
    plannedAmount: 0,
    actualAmount: 0,
    shouldHaveByNow: 0,
    difference: 0,
    daysLeft: 0,
    daysPassed: 0,
    daysInMonth: 0,
    isAhead: false,
    isBehind: false,
  );

  /// –ü—Ä–æ–≥—Ä–µ—Å—Å –º–µ—Å—è—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  double get progressPercent => plannedAmount > 0 ? (actualAmount / plannedAmount).clamp(0.0, 1.0) : 0.0;
  
  /// –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
  double get dailyProgressPercent => (daysPassed / daysInMonth).clamp(0.0, 1.0);
  
  /// –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
  int get remainingForMonth => (plannedAmount - actualAmount).clamp(0, plannedAmount);
}
