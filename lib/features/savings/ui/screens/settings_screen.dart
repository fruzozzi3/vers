// lib/features/settings/ui/screens/settings_screen.dart
import 'package:flutter/material.dart';
import 'package:my_kopilka/features/settings/models/settings.dart';
import 'package:my_kopilka/features/settings/viewmodels/settings_view_model.dart';
import 'package:my_kopilka/theme/colors.dart';
import 'package:provider/provider.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final settingsVM = context.watch<SettingsViewModel>();
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Scaffold(
      appBar: AppBar(
        title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        elevation: 0,
        backgroundColor: Colors.transparent,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
            _buildSectionCard(
              context,
              '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥',
              Icons.palette,
              isDark,
              [
                _buildSwitchTile(
                  context,
                  '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞',
                  '–í–∫–ª—é—á–∏—Ç—å —Ç–µ–º–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
                  Icons.dark_mode,
                  settingsVM.settings.isDarkMode,
                  (value) => settingsVM.toggleTheme(),
                  isDark,
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            _buildSectionCard(
              context,
              '–ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
              Icons.flash_on,
              isDark,
              [
                _buildTile(
                  context,
                  '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É–º–º—ã',
                  '–ò–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
                  Icons.edit,
                  () => _showQuickAddDialog(context, settingsVM),
                  isDark,
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: Wrap(
                    spacing: 8,
                    children: settingsVM.settings.quickAddPresets.map((amount) =>
                      Chip(
                        label: Text('$amount ‚ÇΩ'),
                        backgroundColor: (isDark ? DarkColors.primary : LightColors.primary).withOpacity(0.1),
                        side: BorderSide.none,
                      ),
                    ).toList(),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
            _buildSectionCard(
              context,
              '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
              Icons.tune,
              isDark,
              [
                _buildSwitchTile(
                  context,
                  '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã',
                  '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π',
                  Icons.insights,
                  settingsVM.settings.showPredictions,
                  (value) => settingsVM.updateSettings(
                    settingsVM.settings.copyWith(showPredictions: value),
                  ),
                  isDark,
                ),
                _buildSwitchTile(
                  context,
                  '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–ø–∏–ª–∫–∏',
                  Icons.notifications,
                  settingsVM.settings.enableNotifications,
                  (value) => settingsVM.updateSettings(
                    settingsVM.settings.copyWith(enableNotifications: value),
                  ),
                  isDark,
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // –î–∞–Ω–Ω—ã–µ
            _buildSectionCard(
              context,
              '–î–∞–Ω–Ω—ã–µ',
              Icons.storage,
              isDark,
              [
                _buildTile(
                  context,
                  '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                  '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é',
                  Icons.backup,
                  () => _showExportDialog(context),
                  isDark,
                ),
                _buildTile(
                  context,
                  '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                  '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏',
                  Icons.restore,
                  () => _showImportDialog(context),
                  isDark,
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            _buildSectionCard(
              context,
              '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
              Icons.info,
              isDark,
              [
                _buildTile(
                  context,
                  '–í–µ—Ä—Å–∏—è',
                  '1.0.0',
                  Icons.info_outline,
                  null,
                  isDark,
                ),
                _buildTile(
                  context,
                  '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                  '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º',
                  Icons.feedback,
                  () => _showFeedbackDialog(context),
                  isDark,
                ),
              ],
            ),
            
            const SizedBox(height: 32),
            
            // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            _buildMotivationCard(context, isDark),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionCard(
    BuildContext context,
    String title,
    IconData icon,
    bool isDark,
    List<Widget> children,
  ) {
    return Card(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(20),
            child: Row(
              children: [
                Icon(
                  icon,
                  color: isDark ? DarkColors.primary : LightColors.primary,
                ),
                const SizedBox(width: 12),
                Text(
                  title,
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ],
            ),
          ),
          ...children,
        ],
      ),
    );
  }

  Widget _buildSwitchTile(
    BuildContext context,
    String title,
    String subtitle,
    IconData icon,
    bool value,
    ValueChanged<bool> onChanged,
    bool isDark,
  ) {
    return SwitchListTile(
      title: Text(title),
      subtitle: Text(subtitle),
      secondary: Icon(icon),
      value: value,
      onChanged: onChanged,
      activeColor: isDark ? DarkColors.primary : LightColors.primary,
    );
  }

  Widget _buildTile(
    BuildContext context,
    String title,
    String subtitle,
    IconData icon,
    VoidCallback? onTap,
    bool isDark,
  ) {
    return ListTile(
      title: Text(title),
      subtitle: Text(subtitle),
      leading: Icon(icon),
      trailing: onTap != null ? const Icon(Icons.chevron_right) : null,
      onTap: onTap,
    );
  }

  Widget _buildMotivationCard(BuildContext context, bool isDark) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        gradient: isDark ? AppGradients.cardDark : AppGradients.secondary,
        borderRadius: BorderRadius.circular(20),
      ),
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          Text(
            'üí™',
            style: TextStyle(fontSize: 48),
          ),
          const SizedBox(height: 16),
          Text(
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–æ–ø–∏—Ç—å!',
            style: TextStyle(
              color: isDark ? DarkColors.textPrimary : Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '–ö–∞–∂–¥—ã–π —Ä—É–±–ª—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –º–µ—á—Ç–µ',
            style: TextStyle(
              color: (isDark ? DarkColors.textPrimary : Colors.white).withOpacity(0.9),
              fontSize: 16,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  void _showQuickAddDialog(BuildContext context, SettingsViewModel settingsVM) {
    final controller = TextEditingController();
    final presets = List<int>.from(settingsVM.settings.quickAddPresets);
    
    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: controller,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  labelText: '–ù–æ–≤–∞—è —Å—É–º–º–∞',
                  suffixText: '‚ÇΩ',
                ),
              ),
              const SizedBox(height: 16),
              Wrap(
                spacing: 8,
                children: presets.map((amount) => 
                  Chip(
                    label: Text('$amount ‚ÇΩ'),
                    onDeleted: presets.length > 1 ? () {
                      setState(() {
                        presets.remove(amount);
                      });
                    } : null,
                  ),
                ).toList(),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: () {
                final value = int.tryParse(controller.text);
                if (value != null && value > 0 && !presets.contains(value)) {
                  setState(() {
                    presets.add(value);
                    presets.sort();
                    controller.clear();
                  });
                }
              },
              child: const Text('–î–æ–±–∞–≤–∏—Ç—å'),
            ),
            ElevatedButton(
              onPressed: () {
                settingsVM.updateSettings(
                  settingsVM.settings.copyWith(quickAddPresets: presets),
                );
                Navigator.pop(context);
              },
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }

  void _showExportDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'),
        content: const Text(
          '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–ø–∫—É "–ó–∞–≥—Ä—É–∑–∫–∏". '
          '–û–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ —Ü–µ–ª–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')),
              );
            },
            child: const Text('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _showImportDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'),
        content: const Text(
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. '
          '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')),
              );
            },
            child: const Text('–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _showFeedbackDialog(BuildContext context) {
    final controller = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'),
        content: TextField(
          controller: controller,
          maxLines: 5,
          decoration: const InputDecoration(
            hintText: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...',
            border: OutlineInputBorder(),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')),
              );
            },
            child: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
          ),
        ],
      ),
    );
  }
}
