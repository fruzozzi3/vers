// lib/features/savings/viewmodels/savings_view_model.dart
import 'package:flutter/foundation.dart';
import 'package:my_kopilka/features/savings/data/repository/savings_repository.dart';
import 'package:my_kopilka/features/savings/models/goal.dart';
import 'package:my_kopilka/features/savings/models/transaction.dart';
import 'package:my_kopilka/features/savings/models/achievement.dart';
import 'package:my_kopilka/features/savings/models/statistics.dart';

class SavingsViewModel extends ChangeNotifier {
  final SavingsRepository _repository;
  SavingsViewModel(this._repository);

  List<Goal> _goals = [];
  List<Goal> get goals => _goals;

  List<Achievement> _achievements = [];
  List<Achievement> get achievements => _achievements;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  Future<void> init() async {
    try {
      _achievements = Achievement.getAllAchievements();
      await fetchGoals();
    } catch (e) {
      debugPrint('Error initializing SavingsViewModel: $e');
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> fetchGoals() async {
    try {
      _isLoading = true;
      notifyListeners();

      final fetchedGoals = await _repository.getAllGoals();
      for (var goal in fetchedGoals) {
        goal.currentAmount = await _repository.getCurrentSumForGoal(goal.id!);
      }
      _goals = fetchedGoals;

      _isLoading = false;
      notifyListeners();
    } catch (e) {
      debugPrint('Error fetching goals: $e');
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addGoal(String name, int targetAmount, DateTime deadlineAt) async {
    try {
      final newGoal = Goal(
        name: name,
        targetAmount: targetAmount,
        createdAt: DateTime.now(),
        deadlineAt: deadlineAt,
      );
      await _repository.addGoal(newGoal);
      await fetchGoals();
    } catch (e) {
      debugPrint('Error adding goal: $e');
    }
  }

  Future<void> updateGoal(Goal goal) async {
    try {
      await _repository.updateGoal(goal);
      await fetchGoals();
    } catch (e) {
      debugPrint('Error updating goal: $e');
    }
  }

  Future<void> deleteGoal(int goalId) async {
    try {
      await _repository.deleteGoal(goalId);
      await fetchGoals();
    } catch (e) {
      debugPrint('Error deleting goal: $e');
    }
  }

  Future<void> addTransaction(int goalId, int amount, {String? notes}) async {
    try {
      final transaction = Transaction(
        goalId: goalId,
        amount: amount,
        notes: notes,
        createdAt: DateTime.now(),
      );
      await _repository.addTransaction(transaction);
      await fetchGoals();
    } catch (e) {
      debugPrint('Error adding transaction: $e');
    }
  }

  Future<List<Transaction>> getTransactionsForGoal(int goalId) async {
    try {
      return await _repository.getTransactionsForGoal(goalId);
    } catch (e) {
      debugPrint('Error getting transactions: $e');
      return [];
    }
  }

  Future<SavingsStatistics> getStatisticsForGoal(int goalId) async {
    try {
      final transactions = await getTransactionsForGoal(goalId);
      
      final deposits = transactions.where((t) => t.amount > 0).toList();
      final withdrawals = transactions.where((t) => t.amount < 0).toList();
      
      final totalDeposits = deposits.fold(0, (sum, t) => sum + t.amount);
      final totalWithdrawals = withdrawals.fold(0, (sum, t) => sum + t.amount.abs());
      
      return SavingsStatistics(
        totalDeposits: totalDeposits,
        totalWithdrawals: totalWithdrawals,
        netAmount: totalDeposits - totalWithdrawals,
        averageDeposit: deposits.isEmpty ? 0 : totalDeposits / deposits.length,
        averageWithdrawal: withdrawals.isEmpty ? 0 : totalWithdrawals / withdrawals.length,
        totalTransactions: transactions.length,
        firstTransaction: transactions.isEmpty ? null : transactions.last.createdAt,
        lastTransaction: transactions.isEmpty ? null : transactions.first.createdAt,
      );
    } catch (e) {
      debugPrint('Error getting statistics: $e');
      return SavingsStatistics();
    }
  }

  /// –¢–µ–∫—É—â–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –º–µ—Å—è—Ü, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –∫ –¥–µ–¥–ª–∞–π–Ω—É.
  /// –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: –µ—Å–ª–∏ –Ω–µ–¥–æ–≤–Ω–µ—Å–ª–∏/–ø–µ—Ä–µ–≤–Ω–µ—Å–ª–∏ ‚Äî —Å—É–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
  int requiredMonthly(Goal goal, {DateTime? asOf}) {
    final now = asOf ?? DateTime.now();
    final remaining = (goal.targetAmount - goal.currentAmount).clamp(0, goal.targetAmount);
    // —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–º–µ—Å—è—Ü—ã" (30 –¥–Ω–µ–π) —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–≤–µ—Ä—Ö
    final daysLeft = goal.deadlineAt.isAfter(now) ? goal.deadlineAt.difference(now).inDays : 0;
    int monthsLeft = (daysLeft / 30).ceil();
    if (monthsLeft < 1) monthsLeft = 1;
    final perMonth = (remaining / monthsLeft).ceil();
    return perMonth;
  }


  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  String getMotivationalMessage(Goal goal) {
    final progress = goal.currentAmount / goal.targetAmount;
    
    if (progress >= 1.0) {
      return "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!";
    } else if (progress >= 0.9) {
      return "üî• –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!";
    } else if (progress >= 0.75) {
      return "üí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
    } else if (progress >= 0.5) {
      return "üìà –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü!";
    } else if (progress >= 0.25) {
      return "üåü –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–æ–ø–∏—Ç—å!";
    } else if (progress > 0) {
      return "üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç! –ö–∞–∂–¥—ã–π —Ä—É–±–ª—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!";
    } else {
      return "üí° –í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å! –ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π!";
    }
  }

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
  List<PredictionModel> getPredictions(Goal goal) {
    final remaining = goal.targetAmount - goal.currentAmount;
    if (remaining <= 0) return [];

    final predictionAmounts = [50, 100, 200, 500, 1000];
    return predictionAmounts.map((daily) {
      final days = (remaining / daily).ceil();
      return PredictionModel(
        dailyAmount: daily,
        daysToGoal: days,
        estimatedDate: DateTime.now().add(Duration(days: days)),
      );
    }).toList();
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  int getTotalSaved() {
    return _goals.fold(0, (sum, goal) => sum + goal.currentAmount);
  }

  int getTotalGoals() {
    return _goals.fold(0, (sum, goal) => sum + goal.targetAmount);
  }

  double getOverallProgress() {
    final total = getTotalGoals();
    final saved = getTotalSaved();
    return total > 0 ? saved / total : 0.0;
  }

  List<Goal> getCompletedGoals() {
    return _goals.where((g) => g.currentAmount >= g.targetAmount).toList();
  }

  List<Goal> getActiveGoals() {
    return _goals.where((g) => g.currentAmount < g.targetAmount).toList();
  }
}
